import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const DEPARTMENT_MAP: Record<string, string> = {
  "01": "dans l'Ain",
  "02": "dans l'Aisne",
  "03": "dans l'Allier",
  "04": "dans les Alpes-de-Haute-Provence",
  "05": "dans les Hautes-Alpes",
  "06": "dans les Alpes-Maritimes",
  "07": "dans l'Ard√®che",
  "08": "dans les Ardennes",
  "09": "dans l'Ari√®ge",
  "10": "dans l'Aube",
  "11": "dans l'Aude",
  "12": "dans l'Aveyron",
  "13": "dans les Bouches-du-Rh√¥ne",
  "14": "dans le Calvados",
  "15": "dans le Cantal",
  "16": "dans la Charente",
  "17": "dans la Charente-Maritime",
  "18": "dans le Cher",
  "19": "en Corr√®ze",
  "2A": "dans la Corse-du-Sud",
  "2B": "en Haute-Corse",
  "21": "dans la C√¥te-d'Or",
  "22": "dans les C√¥tes-d'Armor",
  "23": "dans la Creuse",
  "24": "en Dordogne",
  "25": "dans le Doubs",
  "26": "dans la Dr√¥me",
  "27": "dans l'Eure",
  "28": "dans l'Eure-et-Loir",
  "29": "dans le Finist√®re",
  "30": "dans le Gard",
  "31": "dans la Haute-Garonne",
  "32": "dans le Gers",
  "33": "dans la Gironde",
  "34": "dans l'H√©rault",
  "35": "dans l'Ille-et-Vilaine",
  "36": "dans l'Indre",
  "37": "dans l'Indre-et-Loire",
  "38": "dans l'Is√®re",
  "39": "dans le Jura",
  "40": "dans les Landes",
  "41": "dans le Loir-et-Cher",
  "42": "dans la Loire",
  "43": "dans la Haute-Loire",
  "44": "dans la Loire-Atlantique",
  "45": "dans le Loiret",
  "46": "dans le Lot",
  "47": "dans le Lot-et-Garonne",
  "48": "dans la Loz√®re",
  "49": "dans le Maine-et-Loire",
  "50": "dans la Manche",
  "51": "dans la Marne",
  "52": "dans la Haute-Marne",
  "53": "dans la Mayenne",
  "54": "dans la Meurthe-et-Moselle",
  "55": "dans la Meuse",
  "56": "dans le Morbihan",
  "57": "dans la Moselle",
  "58": "dans la Ni√®vre",
  "59": "dans le Nord",
  "60": "dans l'Oise",
  "61": "dans l'Orne",
  "62": "dans le Pas-de-Calais",
  "63": "dans le Puy-de-D√¥me",
  "64": "dans les Pyr√©n√©es-Atlantiques",
  "65": "dans les Hautes-Pyr√©n√©es",
  "66": "dans les Pyr√©n√©es-Orientales",
  "67": "dans le Bas-Rhin",
  "68": "dans le Haut-Rhin",
  "69": "dans le Rh√¥ne",
  "70": "dans la Haute-Sa√¥ne",
  "71": "dans la Sa√¥ne-et-Loire",
  "72": "dans la Sarthe",
  "73": "en Savoie",
  "74": "en Haute-Savoie",
  "75": "dans Paris",
  "76": "dans la Seine-Maritime",
  "77": "dans la Seine-et-Marne",
  "78": "dans les Yvelines",
  "79": "dans les Deux-S√®vres",
  "80": "dans la Somme",
  "81": "dans le Tarn",
  "82": "dans le Tarn-et-Garonne",
  "83": "dans le Var",
  "84": "dans le Vaucluse",
  "85": "dans la Vend√©e",
  "86": "dans la Vienne",
  "87": "dans la Haute-Vienne",
  "88": "dans les Vosges",
  "89": "dans l'Yonne",
  "90": "dans le Territoire de Belfort",
  "91": "dans l'Essonne",
  "92": "dans les Hauts-de-Seine",
  "93": "dans la Seine-Saint-Denis",
  "94": "dans le Val-de-Marne",
  "95": "dans le Val-d'Oise",
  "971": "en Guadeloupe",
  "972": "en Martinique",
  "973": "en Guyane",
  "974": "√† La R√©union",
  "976": "√† Mayotte",
};

function extractPostalCode(address: string): string | null {
  const match = address.match(/\b(\d{5})\b/);
  return match ? match[1] : null;
}

function formatCity(address: string): string {
  // Extract postal code from the address
  const postalCode = extractPostalCode(address);
  if (!postalCode) return address;

  // Extract city name (after postal code)
  const cityMatch = address.match(/\d{5}\s+([^,]+)/);
  const cityName = cityMatch ? cityMatch[1].trim() : address;

  // Use postal code from the address (not from a different location)
  const deptCode = postalCode.substring(0, 2);
  const deptPhrase = DEPARTMENT_MAP[deptCode] || DEPARTMENT_MAP[postalCode.substring(0, 3)] || "";

  return `${cityName} (${postalCode}) ${deptPhrase}`.trim();
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { businesses, companyName } = await req.json();
    const OPEN_AI = Deno.env.get("OPEN_AI");

    if (!OPEN_AI) {
      throw new Error("OPEN_AI is not configured");
    }

    const enrichedBusinesses = [];

    for (const business of businesses) {
      const prompt = `Tu es un expert en r√©daction SEO pour ${companyName}, qui pr√©sente des entreprises locales sur son site web.

CONTEXTE IMPORTANT :
- Le texte sera publi√© sur le site de ${companyName}
- C'est ${companyName} qui pr√©sente une entreprise locale (PAS un partenaire)
- Le ton est √† la 3√®me personne : "contactez-les", "leur entreprise", etc.
- JAMAIS "nous", "notre", "contactez-nous" car ce n'est PAS l'entreprise qui parle d'elle-m√™me

Entreprise locale √† pr√©senter :
- Nom : ${business.nom}
- Adresse : ${business.adresse}
- T√©l√©phone : ${business.telephone}
- Site web : ${business.site_web}

Instructions strictes pour un SEO optimal :

1. **activity** : TITRE LONGUE TRA√éNE SEO de 10 √† 15 mots obligatoirement, SANS PRONOM PERSONNEL.

EXEMPLES de formats √† suivre STRICTEMENT :
- "Paysagiste sp√©cialis√© dans la cr√©ation et l'am√©nagement de jardins et d'espaces verts avec des solutions sur-mesure √†"
- "Plombier professionnel assurant l'installation, la r√©paration et l'entretien de vos syst√®mes de plomberie √†"
- "Expert-comptable accompagnant la gestion comptable, fiscale et administrative de votre entreprise √†"
- "√âlectricien qualifi√© r√©alisant tous vos travaux d'installation et de mise aux normes √©lectriques √†"

R√àGLES IMP√âRATIVES :
- Commence par le NOM DU M√âTIER ou "Professionnel(s) de..." suivi d'un PARTICIPE PR√âSENT (proposant, assurant, sp√©cialis√© dans, offrant, r√©alisant, etc.)
- JAMAIS de pronoms personnels (ils, elle, nous) - forme nominale uniquement
- Mentionne EXPLICITEMENT la profession/le m√©tier de l'entreprise
- Int√®gre des qualificatifs pertinents (professionnel, qualifi√©, sp√©cialis√©, exp√©riment√©, artisan)
- La phrase DOIT se terminer par "√†" (sans la ville). Elle sera suivie par le champ city.
- Compte exactement entre 10 et 15 mots (v√©rifie bien)

2. **extract** : R√©sum√© percutant de 40 √† 60 mots enrichi de mots-cl√©s SEO relatifs √† l'activit√©. Doit donner envie de contacter l'entreprise en mettant en avant ses points forts, son expertise et sa valeur ajout√©e. Utilise des termes recherch√©s par les clients potentiels.

3. **description** : Description de 100 √† 150 MOTS en TEXTE BRUT (pas de HTML, pas de balises).

üö´ MOTS ET CONCEPTS TOTALEMENT INTERDITS üö´
‚ùå partenariat / partenaire
‚ùå collaborer / collaboration
‚ùå s'associer / associer
‚ùå apporteur d'affaires / rapporteur
‚ùå relation commerciale / accord commercial
‚ùå JAMAIS mentionner le site web (${business.site_web}) dans la description

PARAGRAPHE 2 - Choisis UNE SEULE de ces formulations (varie pour √©viter duplicate content) :
1. "${companyName} est fier de vous pr√©senter ${business.nom}, une entreprise locale de qualit√©."
2. "${companyName} met en avant ${business.nom} pour la qualit√© de ses services."
3. "${companyName} vous recommande ${business.nom} pour leur expertise reconnue."
4. "${companyName} souhaite mettre en lumi√®re ${business.nom}, acteur local de confiance."
5. "D√©couvrez ${business.nom}, une entreprise que ${companyName} vous pr√©sente aujourd'hui."
6. "${companyName} valorise les entreprises locales comme ${business.nom}."
7. "${companyName} vous invite √† d√©couvrir ${business.nom} et leurs services de qualit√©."
8. "Faites confiance √† ${business.nom}, pr√©sent√© par ${companyName}."
9. "${companyName} met √† l'honneur ${business.nom} pour son professionnalisme."
10. "Rencontrez ${business.nom}, une adresse que ${companyName} vous recommande."
11. "${companyName} vous fait d√©couvrir ${business.nom}, r√©f√©rence dans son domaine."
12. "${business.nom} fait partie des entreprises que ${companyName} souhaite vous pr√©senter."
13. "${companyName} vous pr√©sente ${business.nom}, pour des services de proximit√©."
14. "D√©couvrez le savoir-faire de ${business.nom}, mis en lumi√®re par ${companyName}."
15. "${companyName} attire votre attention sur ${business.nom} et leur expertise."
16. "${business.nom} est une entreprise locale que ${companyName} tient √† vous pr√©senter."
17. "${companyName} vous oriente vers ${business.nom} pour leurs comp√©tences reconnues."
18. "Prenez contact avec ${business.nom}, entreprise pr√©sent√©e par ${companyName}."
19. "${companyName} souhaite vous faire conna√Ætre ${business.nom} et leurs prestations."
20. "${business.nom}, une adresse de confiance mise en avant par ${companyName}."
21. "${companyName} vous recommande de contacter ${business.nom} pour vos besoins."
22. "Faites appel √† ${business.nom}, entreprise valoris√©e par ${companyName}."
23. "${companyName} pr√©sente ${business.nom}, acteur local engag√© et professionnel."
24. "Laissez-vous convaincre par ${business.nom}, pr√©sent√© sur ${companyName}."
25. "${companyName} vous informe sur ${business.nom}, prestataire qualifi√© dans votre r√©gion."

Choisis LA FORMULATION LA PLUS PERTINENTE en fonction de l'activit√© et du positionnement de ${business.nom}.

STRUCTURE OBLIGATOIRE (100-150 mots total) :
- Paragraphe 1 (40-60 mots) : Pr√©senter l'activit√© et l'expertise de ${business.nom}
- Paragraphe 2 (20-30 mots) : UNE des 25 formulations ci-dessus (varie)
- Paragraphe 3 (30-40 mots) : Coordonn√©es UNIQUEMENT (nom, adresse, t√©l√©phone) et call-to-action en 3√®me personne

üö´ PARAGRAPHE 3 - INTERDICTIONS ABSOLUES :
- NE JAMAIS mentionner le site web ou l'URL
- N'utiliser QUE : nom, adresse, t√©l√©phone
- Formulation naturelle en phrases

CONSIGNES DE TON :
- Parle TOUJOURS √† la 3√®me personne de l'entreprise
- Utilise "leur", "ils", "cette entreprise", "${business.nom}"
- CTA : "Contactez-les au ${business.telephone}" (JAMAIS "contactez-nous" ou "rendez-vous sur leur site")

R√©ponds UNIQUEMENT avec un objet JSON valide contenant les 3 champs : activity, extract, description. Pas de texte avant ou apr√®s.`;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPEN_AI}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-5-mini",
          messages: [
            {
              role: "system",
              content:
                "Tu es un expert en r√©daction de contenus pour annuaires professionnels. Tu r√©diges uniquement en fran√ßais avec une grammaire irr√©prochable et aucune faute d'orthographe. Tu r√©ponds toujours avec du JSON valide uniquement, sans texte suppl√©mentaire.",
            },
            { role: "user", content: prompt },
          ],
          max_completion_tokens: 8000,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("AI API error:", response.status, errorText);
        throw new Error(`AI API returned status ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log("OpenAI response:", JSON.stringify(data, null, 2));

      // V√©rifier que la r√©ponse contient les donn√©es attendues
      if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
        console.error("Invalid OpenAI response structure:", JSON.stringify(data));
        throw new Error("OpenAI response missing expected data structure");
      }

      const content = data.choices[0].message.content;

      // V√©rifier que le contenu n'est pas vide
      if (!content || content.trim() === "") {
        console.error("Empty content from OpenAI");
        throw new Error("OpenAI returned empty content");
      }

      // Parse the JSON response
      let aiData;
      try {
        // Remove markdown code blocks if present
        const cleanContent = content.replace(/```json\n?|\n?```/g, "").trim();
        console.log("Cleaned content for parsing:", cleanContent);
        aiData = JSON.parse(cleanContent);
        
        // V√©rifier que les champs requis sont pr√©sents
        if (!aiData.activity || !aiData.extract || !aiData.description) {
          console.error("Missing required fields in AI response:", aiData);
          throw new Error("AI response missing required fields (activity, extract, or description)");
        }
      } catch (e) {
        console.error("Failed to parse AI response:", content);
        console.error("Parse error:", e);
        throw new Error(`Invalid JSON from AI: ${e instanceof Error ? e.message : 'Unknown error'}`);
      }

      enrichedBusinesses.push({
        name: `- ${business.nom}`,
        activity: aiData.activity,
        city: formatCity(business.adresse),
        extract: aiData.extract,
        description: aiData.description,
      });

      // Small delay to avoid rate limits
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    return new Response(JSON.stringify({ enrichedBusinesses }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error in enrich-businesses function:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
