import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const DEPARTMENT_MAP: Record<string, string> = {
  "01": "dans l'Ain",
  "02": "dans l'Aisne",
  "03": "dans l'Allier",
  "04": "dans les Alpes-de-Haute-Provence",
  "05": "dans les Hautes-Alpes",
  "06": "dans les Alpes-Maritimes",
  "07": "dans l'Ard√®che",
  "08": "dans les Ardennes",
  "09": "dans l'Ari√®ge",
  "10": "dans l'Aube",
  "11": "dans l'Aude",
  "12": "dans l'Aveyron",
  "13": "dans les Bouches-du-Rh√¥ne",
  "14": "dans le Calvados",
  "15": "dans le Cantal",
  "16": "dans la Charente",
  "17": "dans la Charente-Maritime",
  "18": "dans le Cher",
  "19": "en Corr√®ze",
  "2A": "dans la Corse-du-Sud",
  "2B": "en Haute-Corse",
  "21": "dans la C√¥te-d'Or",
  "22": "dans les C√¥tes-d'Armor",
  "23": "dans la Creuse",
  "24": "en Dordogne",
  "25": "dans le Doubs",
  "26": "dans la Dr√¥me",
  "27": "dans l'Eure",
  "28": "dans l'Eure-et-Loir",
  "29": "dans le Finist√®re",
  "30": "dans le Gard",
  "31": "dans la Haute-Garonne",
  "32": "dans le Gers",
  "33": "dans la Gironde",
  "34": "dans l'H√©rault",
  "35": "dans l'Ille-et-Vilaine",
  "36": "dans l'Indre",
  "37": "dans l'Indre-et-Loire",
  "38": "dans l'Is√®re",
  "39": "dans le Jura",
  "40": "dans les Landes",
  "41": "dans le Loir-et-Cher",
  "42": "dans la Loire",
  "43": "dans la Haute-Loire",
  "44": "dans la Loire-Atlantique",
  "45": "dans le Loiret",
  "46": "dans le Lot",
  "47": "dans le Lot-et-Garonne",
  "48": "dans la Loz√®re",
  "49": "dans le Maine-et-Loire",
  "50": "dans la Manche",
  "51": "dans la Marne",
  "52": "dans la Haute-Marne",
  "53": "dans la Mayenne",
  "54": "dans la Meurthe-et-Moselle",
  "55": "dans la Meuse",
  "56": "dans le Morbihan",
  "57": "dans la Moselle",
  "58": "dans la Ni√®vre",
  "59": "dans le Nord",
  "60": "dans l'Oise",
  "61": "dans l'Orne",
  "62": "dans le Pas-de-Calais",
  "63": "dans le Puy-de-D√¥me",
  "64": "dans les Pyr√©n√©es-Atlantiques",
  "65": "dans les Hautes-Pyr√©n√©es",
  "66": "dans les Pyr√©n√©es-Orientales",
  "67": "dans le Bas-Rhin",
  "68": "dans le Haut-Rhin",
  "69": "dans le Rh√¥ne",
  "70": "dans la Haute-Sa√¥ne",
  "71": "dans la Sa√¥ne-et-Loire",
  "72": "dans la Sarthe",
  "73": "en Savoie",
  "74": "en Haute-Savoie",
  "75": "dans Paris",
  "76": "dans la Seine-Maritime",
  "77": "dans la Seine-et-Marne",
  "78": "dans les Yvelines",
  "79": "dans les Deux-S√®vres",
  "80": "dans la Somme",
  "81": "dans le Tarn",
  "82": "dans le Tarn-et-Garonne",
  "83": "dans le Var",
  "84": "dans le Vaucluse",
  "85": "dans la Vend√©e",
  "86": "dans la Vienne",
  "87": "dans la Haute-Vienne",
  "88": "dans les Vosges",
  "89": "dans l'Yonne",
  "90": "dans le Territoire de Belfort",
  "91": "dans l'Essonne",
  "92": "dans les Hauts-de-Seine",
  "93": "dans la Seine-Saint-Denis",
  "94": "dans le Val-de-Marne",
  "95": "dans le Val-d'Oise",
  "971": "en Guadeloupe",
  "972": "en Martinique",
  "973": "en Guyane",
  "974": "√† La R√©union",
  "976": "√† Mayotte",
};

function extractPostalCode(address: string): string | null {
  const match = address.match(/\b(\d{5})\b/);
  return match ? match[1] : null;
}

function correctPrepositionContractions(text: string): string {
  // R√®gles de contraction obligatoires en fran√ßais
  return text
    .replace(/\b√† Le\b/g, "au")
    .replace(/\b√† Les\b/g, "aux")
    .replace(/\b√† La\b/g, "√† la")
    .replace(/\b√† L'/g, "√† l'");
}

function formatCity(address: string): string {
  // Extract postal code from the address
  const postalCode = extractPostalCode(address);
  if (!postalCode) return address;

  // Extract city name (after postal code)
  const cityMatch = address.match(/\d{5}\s+([^,]+)/);
  let cityName = cityMatch ? cityMatch[1].trim() : address;

  // Remove the article from the beginning of the city name
  // because the preposition will be in the activity field
  cityName = cityName
    .replace(/^Le\s+/i, '')
    .replace(/^La\s+/i, '')
    .replace(/^Les\s+/i, '')
    .replace(/^L'/i, '');

  // Use postal code from the address (not from a different location)
  const deptCode = postalCode.substring(0, 2);
  const deptPhrase = DEPARTMENT_MAP[deptCode] || DEPARTMENT_MAP[postalCode.substring(0, 3)] || "";

  return `${cityName} (${postalCode}) ${deptPhrase}`.trim();
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { businesses, companyName } = await req.json();
    const OPEN_AI = Deno.env.get("OPEN_AI");

    if (!OPEN_AI) {
      throw new Error("OPEN_AI is not configured");
    }

    const enrichedBusinesses = [];

    for (const business of businesses) {
      const prompt = `Tu es un expert en r√©daction de fiches locales engageantes pour ${companyName}, qui pr√©sente des entreprises locales sur son site web.

CONTEXTE :
- Le texte sera publi√© sur le site de ${companyName}
- Ton DIRECT et CONVERSATIONNEL avec tutoiement ou vouvoiement selon le contexte
- Interpelle le lecteur avec des questions ou formulations engageantes
- Mention naturelle de ${companyName} comme rep√®re g√©ographique ou r√©f√©rence locale

ENTREPRISE √Ä PR√âSENTER :
Nom : ${business.nom}
Adresse : ${business.adresse}
T√©l√©phone : ${business.telephone}
Site web : ${business.site_web}

üìù FORMAT DE R√âDACTION

1. **activity** (10-15 mots)

IMPORTANT - Analyse d'abord la ville dans l'adresse pour adapter la pr√©position finale :
- Si la ville commence par "Le " (ex: Le Pradet) ‚Üí termine par "au"
- Si la ville commence par "La " (ex: La Ciotat) ‚Üí termine par "√† la"
- Si la ville commence par "Les " (ex: Les Pennes-Mirabeau) ‚Üí termine par "aux"
- Si la ville commence par "L'" (ex: L'Isle-sur-la-Sorgue) ‚Üí termine par "√† l'"
- Sinon (ex: Marseille, Aix-en-Provence) ‚Üí termine par "√†"

Exemples corrects :
- "Magasin de tissus d'ameublement et de couture proposant un large choix au" (pour Le Pradet)
- "Entreprise de plomberie r√©alisant l'installation et la r√©paration de canalisations √†" (pour Marseille)
- "Concessionnaire automobile sp√©cialis√© dans les v√©hicules sans permis aux" (pour Les Pennes-Mirabeau)
- "Salon de coiffure proposant des prestations sur mesure √† la" (pour La Ciotat)

R√®gles :
‚úì Commence par le nom du m√©tier ou de l'activit√© principale
‚úì Utilise des mots-cl√©s SEO (m√©tier + sp√©cialit√©)
‚úì Pas de nom d'entreprise
‚úì Pas de pronom personnel
‚úì Phrase descriptive et naturelle

2. **extract** (40-60 mots)
R√©sum√© informatif et engageant. D√©cris l'offre, la localisation, ce qui diff√©rencie l'entreprise.
√âvite le jargon commercial creux.
Utilise la bonne pr√©position contract√©e selon la ville (au/√† la/aux/√† l').

3. **description** (110-130 mots) - STYLE DIRECT ET ENGAGEANT

üìç PARAGRAPHE 1 (35-45 mots) : Accroche + Mention ${companyName}

Commence par UNE QUESTION DIRECTE ou une INTERPELLATION qui capte l'attention :
- "Vous √™tes √† la recherche de [service/produit] ? Ne cherchez pas plus loin..."
- "Besoin d'un [m√©tier] de confiance ? Rendez-vous chez..."
- "Vous cherchez [produit/service] ? ${business.nom} est l√† pour vous..."

Int√®gre NATURELLEMENT ${companyName} comme REP√àRE LOCAL :
- "...tout proche de ${companyName}"
- "...√† deux pas de ${companyName}"
- "...pr√®s de ${companyName}"
- "...dans le m√™me secteur que ${companyName}"

Utilise la bonne pr√©position contract√©e pour la ville (au/√† la/aux/√† l').

Exemple de structure :
"Vous √™tes √† la recherche de tissus de qualit√© pour la confection maison de v√™tement ou d'ameublement ? Ne cherchez pas plus loin et rendez-vous chez ${business.nom} au Pradet tout proche de ${companyName}."

üéØ PARAGRAPHE 2 (35-45 mots) : D√©tails concrets de l'offre

D√©cris CE QUE PROPOSE CONCR√àTEMENT ${business.nom} :
- Produits/services sp√©cifiques
- Points forts r√©els (nouveaut√©s r√©guli√®res, prix attractifs, gamme large, etc.)
- √âl√©ments qui donnent envie

Utilise un ton VIVANT et PR√âCIS. Mentionne des d√©tails CONCRETS.
Utilise la bonne pr√©position contract√©e pour la ville.

Exemple :
"Vous y retrouverez de jolis tissus de qualit√©. ${business.nom} situ√© au Pradet vous propose de nouvelles collections r√©guli√®rement. Mais aussi une multitude de pelotes √† tricoter et le tout √† prix tout doux !"

üìû PARAGRAPHE 3 (35-45 mots) : Coordonn√©es + CTA

Formule UN APPEL CLAIR avec les coordonn√©es compl√®tes :
- Commence par un CTA adapt√© √† l'activit√©
- Donne l'adresse compl√®te de mani√®re fluide
- Termine par le t√©l√©phone avec un CTA compl√©mentaire

Exemples de structure :
"Pour vous rendre chez ${business.nom} au Pradet, rendez-vous √† l'adresse suivante : ${business.adresse}. N'h√©sitez pas √† contacter votre [m√©tier] au ${business.telephone}."

OU :

"Rendez-vous chez ${business.nom}, ${business.adresse}. Vous pouvez √©galement les contacter au ${business.telephone} pour [action adapt√©e : prendre rendez-vous / obtenir un devis / commander]."

‚öôÔ∏è R√àGLES LINGUISTIQUES OBLIGATOIRES

Dans les champs extract et description, applique syst√©matiquement les contractions :
- "√† Le" ‚Üí "au"
- "√† Les" ‚Üí "aux"
- "√† La" ‚Üí "√† la"
- "√† L'" ‚Üí "√† l'"

Exemples :
‚úÖ "situ√© au Pradet" (pas "situ√© √† Le Pradet")
‚úÖ "aux Pennes-Mirabeau" (pas "√† Les Pennes-Mirabeau")
‚úÖ "√† la Ciotat" (pas "√† La Ciotat")

üö´ INTERDICTIONS ABSOLUES

‚ùå "partenariat", "collaboration", "partenaire", "s'associer"
‚ùå Phrases creuses : "expertise reconnue", "savoir-faire av√©r√©", "approche personnalis√©e"
‚ùå Mention du site web ou URL
‚ùå Ton institutionnel ou trop formel
‚ùå √ânum√©rations plates

‚úÖ CE QUI EST ATTENDU

‚úì Ton direct et engageant (questions, interpellations)
‚úì Mention naturelle de ${companyName} comme rep√®re g√©ographique
‚úì D√©tails concrets sur les produits/services
‚úì CTAs clairs et naturels
‚úì Fluidit√© et lisibilit√©
‚úì Pr√©positions contract√©es correctes partout (au/√† la/aux/√† l')

R√©ponds UNIQUEMENT avec un objet JSON valide :
{ "activity": "...", "extract": "...", "description": "..." }
Aucun texte avant ou apr√®s.`;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPEN_AI}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4o",
          messages: [
            {
              role: "system",
              content:
                "Tu es un expert en r√©daction de contenus pour annuaires professionnels. Tu r√©diges uniquement en fran√ßais avec une grammaire irr√©prochable et aucune faute d'orthographe. Tu r√©ponds toujours avec du JSON valide uniquement, sans texte suppl√©mentaire.",
            },
            { role: "user", content: prompt },
          ],
          max_tokens: 800,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("AI API error:", response.status, errorText);
        throw new Error(`AI API returned status ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log("OpenAI response:", JSON.stringify(data, null, 2));

      // V√©rifier que la r√©ponse contient les donn√©es attendues
      if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
        console.error("Invalid OpenAI response structure:", JSON.stringify(data));
        throw new Error("OpenAI response missing expected data structure");
      }

      const content = data.choices[0].message.content;

      // V√©rifier que le contenu n'est pas vide
      if (!content || content.trim() === "") {
        console.error("Empty content from OpenAI");
        throw new Error("OpenAI returned empty content");
      }

      // Parse the JSON response
      let aiData;
      try {
        // Remove markdown code blocks if present
        const cleanContent = content.replace(/```json\n?|\n?```/g, "").trim();
        console.log("Cleaned content for parsing:", cleanContent);
        aiData = JSON.parse(cleanContent);
        
        // V√©rifier que les champs requis sont pr√©sents
        if (!aiData.activity || !aiData.extract || !aiData.description) {
          console.error("Missing required fields in AI response:", aiData);
          throw new Error("AI response missing required fields (activity, extract, or description)");
        }
      } catch (e) {
        console.error("Failed to parse AI response:", content);
        console.error("Parse error:", e);
        throw new Error(`Invalid JSON from AI: ${e instanceof Error ? e.message : 'Unknown error'}`);
      }

      enrichedBusinesses.push({
        name: `- ${business.nom}`,
        activity: aiData.activity,
        city: formatCity(business.adresse),
        extract: aiData.extract,
        description: aiData.description,
      });

      // Small delay to avoid rate limits
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    return new Response(JSON.stringify({ enrichedBusinesses }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error in enrich-businesses function:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
